/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    'youtube-videos': YoutubeVideo;
    channels: Channel;
    'ad-banners': AdBanner;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'youtube-videos': YoutubeVideosSelect<false> | YoutubeVideosSelect<true>;
    channels: ChannelsSelect<false> | ChannelsSelect<true>;
    'ad-banners': AdBannersSelect<false> | AdBannersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "youtube-videos".
 */
export interface YoutubeVideo {
  id: number;
  title: string;
  description: string;
  /**
   * The YouTube video ID (e.g., "Izd-SLokbPY")
   */
  youtubeId: string;
  /**
   * Video duration in format like "2:45:30"
   */
  duration: string;
  category:
    | 'Opening Ceremony'
    | 'Cultural'
    | 'Youth Event'
    | 'Business'
    | 'Conference'
    | 'Awards'
    | 'Political'
    | 'Convention'
    | 'Professional'
    | 'Education'
    | 'Awards Ceremony'
    | 'Celebrity Interview'
    | 'Movie Promotion'
    | 'Beauty Pageant'
    | 'Business Interview'
    | 'Pageant'
    | 'Entertainment'
    | 'Music Festival'
    | 'Comedy'
    | 'Interview';
  /**
   * Scheduled time in 24-hour format (e.g., "09:00")
   */
  scheduledTime?: string | null;
  /**
   * Whether this video is active and should be displayed
   */
  isActive?: boolean | null;
  /**
   * Display order (lower numbers appear first)
   */
  order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "channels".
 */
export interface Channel {
  id: number;
  name: string;
  description: string;
  /**
   * Unique identifier for the channel (e.g., "tana-conference")
   */
  slug: string;
  color: 'blue' | 'green' | 'pink' | 'indigo' | 'teal' | 'amber' | 'purple' | 'red';
  /**
   * Tailwind gradient classes (e.g., "from-blue-600 to-blue-800")
   */
  bgGradient: string;
  /**
   * Emoji icon for the channel
   */
  icon: string;
  /**
   * Is this a YouTube-based channel?
   */
  isYoutube?: boolean | null;
  /**
   * HLS stream URL (for non-YouTube channels)
   */
  streamUrl?: string | null;
  /**
   * Default YouTube video ID for this channel
   */
  youtubeVideoId?: string | null;
  /**
   * YouTube videos for this channel
   */
  youtubePlaylist?: (number | YoutubeVideo)[] | null;
  /**
   * Whether this channel is active and should be displayed
   */
  isActive?: boolean | null;
  /**
   * Display order (lower numbers appear first)
   */
  order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage rotating advertisement banners
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ad-banners".
 */
export interface AdBanner {
  id: number;
  /**
   * The main title/heading for the ad banner
   */
  title: string;
  /**
   * Subtitle or description text for the ad banner
   */
  subtitle: string;
  /**
   * Logo image for the ad banner (recommended: 200x150px)
   */
  logo?: (number | null) | Media;
  /**
   * Alternative: Direct URL to logo image (used if no logo upload)
   */
  logoUrl?: string | null;
  /**
   * Optional: URL to redirect when banner is clicked
   */
  clickUrl?: string | null;
  /**
   * Whether this banner should be displayed in rotation
   */
  isActive?: boolean | null;
  /**
   * Order in which banners appear (lower numbers first)
   */
  displayOrder?: number | null;
  /**
   * Optional: Date when banner should start showing
   */
  startDate?: string | null;
  /**
   * Optional: Date when banner should stop showing
   */
  endDate?: string | null;
  /**
   * Target specific device types
   */
  targetAudience?: ('all' | 'mobile' | 'desktop' | 'tablet') | null;
  /**
   * Category for better organization
   */
  category?: ('financial' | 'events' | 'organizations' | 'general') | null;
  /**
   * Number of times this banner has been displayed
   */
  impressions?: number | null;
  /**
   * Number of times this banner has been clicked
   */
  clicks?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'youtube-videos';
        value: number | YoutubeVideo;
      } | null)
    | ({
        relationTo: 'channels';
        value: number | Channel;
      } | null)
    | ({
        relationTo: 'ad-banners';
        value: number | AdBanner;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "youtube-videos_select".
 */
export interface YoutubeVideosSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  youtubeId?: T;
  duration?: T;
  category?: T;
  scheduledTime?: T;
  isActive?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "channels_select".
 */
export interface ChannelsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  slug?: T;
  color?: T;
  bgGradient?: T;
  icon?: T;
  isYoutube?: T;
  streamUrl?: T;
  youtubeVideoId?: T;
  youtubePlaylist?: T;
  isActive?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ad-banners_select".
 */
export interface AdBannersSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  logo?: T;
  logoUrl?: T;
  clickUrl?: T;
  isActive?: T;
  displayOrder?: T;
  startDate?: T;
  endDate?: T;
  targetAudience?: T;
  category?: T;
  impressions?: T;
  clicks?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}